openapi: 3.1.0
info:
  title: SimpleShop Product Service API Definition
  description: |
    Welcome to the **SimpleShop Product Service API**! This API allows clients and administrators to efficiently manage and retrieve product, category, and brand information within the SimpleShop platform.
    
    ### Key Features
    - **Product Management**: Create, update, and retrieve detailed information about products, including pricing, dimensions, and stock status.
    - **Category Management**: Organize products into categories, manage parent-child relationships, and list categories.
    - **Brand Management**: Manage and retrieve information about product brands.
    - **Pagination and Sorting**: Easily paginate through large datasets with flexible sorting options.
    - **Error Handling**: Comprehensive error responses with detailed descriptions for debugging.
    
    ---
  termsOfService: http://simpleshop/terms/
  contact:
    name: API Support
    url: http://simpleshop/support
    email: support@simpleshop.com
  license:
    name: SimpleShop License
    url: http://simpleshop/licenses/LICENSE-2.0.html
  version: 0.0.1
externalDocs:
  description: External Documentation
  url: https://example.com
servers:
  - url: http://development.simpleshop/
    description: Development server

tags:
  - name: Products
    description: Products-related operations
  - name: Categories
    description: Category-related operations
  - name: Brands
    description: Brand-related operations
security:
  - oAuth2AuthCode:
      - openid

paths:
  /admin/products:
    get:
      tags:
        - Products
      summary: List Products
      description: Retrieve a paginated list of products.
      operationId: listProductsByPage
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/SortField'
        - $ref: '#/components/parameters/SortDirection'
      responses:
        '200':
          $ref: '#/components/responses/ProductPage'
        '400':
          $ref: "#/components/responses/BadRequest"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '500':
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - Products
      summary: Create Product
      description: |
        Post Product details to SimpleShop for product creation
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
            examples:
              validProduct:
                $ref: "#/components/examples/CreateProductValidExample"
              missingFields:
                $ref: "#/components/examples/CreateProductMissingFieldsExample"
              invalidValues:
                $ref: "#/components/examples/CreateProductInvalidValuesExample"
      responses:
        '201':
          $ref: "#/components/responses/ProductResponse"
        '400':
          $ref: "#/components/responses/BadRequest"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /admin/products/{id}:
    get:
      tags:
        - Products
      summary: get Product by id
      description: Retrieve a product by id.
      operationId: getProductById
      parameters:
        - $ref: "#/components/parameters/PathIdentifier"
      responses:
        '200':
          $ref: '#/components/responses/ProductResponse'
        '400':
          $ref: "#/components/responses/BadRequest"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '500':
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - Products
      summary: Update Product
      description: |
        Put Product details to SimpleShop for product creation
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          description: Unique identifier of the product to update
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 123
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
            examples:
              validProduct:
                $ref: "#/components/examples/CreateProductValidExample"
              missingFields:
                $ref: "#/components/examples/CreateProductMissingFieldsExample"
              invalidValues:
                $ref: "#/components/examples/CreateProductInvalidValuesExample"
      responses:
        '201':
          $ref: "#/components/responses/ProductResponse"
        '400':
          $ref: "#/components/responses/BadRequest"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /products:
    get:
      tags:
        - Products
      summary: List Products
      description: Retrieve a paginated list of products for client, based on provided criteria.
      operationId: clientListProductsByPage
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/SortField'
        - $ref: '#/components/parameters/SortDirection'
        - name: priceFrom
          in: query
          description: Min price of product
          required: false
          schema:
            type: number
            format: float
            minimum: 0.01
          example: 99.99
        - name: priceTo
          in: query
          description: Max price of product
          required: false
          schema:
            type: number
            format: float
            minimum: 0.01
          example: 99.99
        - name: searchKeyword
          in: query
          description: Search keyword to find a product
          required: false
          schema:
            type: string
          example: "AMD"
      responses:
        '200':
          $ref: '#/components/responses/ProductPage'
        '400':
          $ref: "#/components/responses/BadRequest"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /products/{id}:
    get:
      tags:
        - Products
      summary: Get Product by id.
      description: Get product detail by id.
      operationId: clientGetProductById
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/SortField'
        - $ref: '#/components/parameters/SortDirection'
      responses:
        '200':
          $ref: '#/components/responses/ProductPage'
        '400':
          $ref: "#/components/responses/BadRequest"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /admin/categories:
    get:
      tags:
        - Categories
      summary: List Categories
      description: Retrieve a paginated list of categories.
      operationId: listCategoriesByPage
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/SortField'
        - $ref: '#/components/parameters/SortDirection'
      responses:
        '200':
          $ref: '#/components/responses/CategoryPage'
        '400':
          $ref: "#/components/responses/BadRequest"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '500':
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - Categories
      summary: Create Category
      description: |
        Post Category details to SimpleShop for category creation
      operationId: createCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
            examples:
              validCategory:
                $ref: '#/components/examples/CreateCategoryValidExample'
              rootCategory:
                $ref: '#/components/examples/CreateCategoryRootExample'
      responses:
        '201':
          $ref: "#/components/responses/CategoryResponse"
        '400':
          $ref: "#/components/responses/BadRequest"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /admin/categories/{id}:
    get:
      tags:
        - Categories
      summary: get Category by id
      description: Retrieve a category by id.
      operationId: getCategoryById
      parameters:
        - $ref: "#/components/parameters/PathIdentifier"
      responses:
        '200':
          $ref: '#/components/responses/CategoryResponse'
        '400':
          $ref: "#/components/responses/BadRequest"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '500':
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - Categories
      summary: Update Category
      description: |
        Put Category details to SimpleShop for category creation
      operationId: updateCategory
      parameters:
        - $ref: "#/components/parameters/PathIdentifier"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
            examples:
              validCategory:
                $ref: '#/components/examples/CreateCategoryValidExample'
              rootCategory:
                $ref: '#/components/examples/CreateCategoryRootExample'
      responses:
        '201':
          $ref: "#/components/responses/CategoryResponse"
        '400':
          $ref: "#/components/responses/BadRequest"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /admin/brands:
    get:
      tags:
        - Brands
      summary: List Brands
      description: Retrieve a paginated list of categories.
      operationId: listBrandsByPage
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/SortField'
        - $ref: '#/components/parameters/SortDirection'
      responses:
        '200':
          $ref: '#/components/responses/BrandPage'
        '400':
          $ref: "#/components/responses/BadRequest"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '500':
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - Brands
      summary: Create Brand
      description: |
        Post Brand details to SimpleShop for brand creation
      operationId: createBrand
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Brand"
            examples:
              validCategory:
                $ref: '#/components/examples/CreateBrandValidExample'
      responses:
        '201':
          $ref: "#/components/responses/BrandResponse"
        '400':
          $ref: "#/components/responses/BadRequest"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '500':
          $ref: "#/components/responses/InternalServerError"
  /admin/brands/{id}:
    get:
      tags:
        - Brands
      summary: get Brand by id
      description: Retrieve a brand by id.
      operationId: getBrandById
      parameters:
        - $ref: "#/components/parameters/PathIdentifier"
      responses:
        '200':
          $ref: '#/components/responses/BrandResponse'
        '400':
          $ref: "#/components/responses/BadRequest"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '500':
          $ref: "#/components/responses/InternalServerError"
    put:
      tags:
        - Brands
      summary: Update Brand
      description: |
        Put Brand details to SimpleShop for update
      operationId: updateBrand
      parameters:
        - $ref: "#/components/parameters/PathIdentifier"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Brand"
            examples:
              validCategory:
                $ref: '#/components/examples/CreateBrandValidExample'
      responses:
        '201':
          $ref: "#/components/responses/BrandResponse"
        '400':
          $ref: "#/components/responses/BadRequest"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '500':
          $ref: "#/components/responses/InternalServerError"

components:
  schemas:
    PageProperties:
      type: object
      properties:
        page:
          type: integer
          format: int32
          description: The current page number (zero-based).
        size:
          type: integer
          format: int32
          description: The number of entities per page.
        totalPages:
          type: integer
          format: int32
          description: The total number of pages available.
        totalElements:
          type: integer
          format: int64
          description: The total number of entities available.
      required:
        - page
        - size
        - totalPages
        - totalElements
    Brand:
      type: object
      description: Brand Entity
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the brand
          readOnly: true
        name:
          type: string
          description: Name of the Brand
          minLength: 1
          maxLength: 255
      required:
        - name
    Category:
      type: object
      description: Category Entity
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the category
          readOnly: true
        name:
          type: string
          description: Name of the category
          minLength: 1
          maxLength: 255
        enabled:
          type: boolean
          description: Indicates if the category is enabled.
        parentId:
          type: integer
          format: int64
          description: Unique identifier for the Category Parent. Ignore for Root category
      required:
        - name
        - enabled
    Product:
      type: object
      description: Create Product
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the product
          readOnly: true
        name:
          type: string
          description: Name of the product
          minLength: 1
          maxLength: 255
        shortDescription:
          type: string
          description: Short description of the product
          maxLength: 255
        fullDescription:
          type: string
          description: Detailed description of the product
          maxLength: 2550
        inStock:
          type: boolean
          description: Indicates if the product is in stock
        weight:
          type: number
          format: double
          description: Weight of the product in kilograms
          minimum: 0.01
          maximum: 50.00
        width:
          type: number
          format: double
          description: Width of the product in centimeters
          minimum: 0.01
          maximum: 300.00
        height:
          type: number
          format: double
          description: Height of the product in centimeters
          minimum: 0.01
          maximum: 200.00
        length:
          type: number
          format: double
          description: Length of the product in centimeters
          minimum: 0.01
          maximum: 300.00
        price:
          type: number
          format: double
          description: Price of the product
          minimum: 0.01
        cost:
          type: number
          format: double
          description: Cost of the product
          minimum: 0.01
        discountPercent:
          type: number
          format: double
          description: Discount percent on the product
          minimum: 1
          maximum: 100
        brandId:
          type: integer
          format: int64
          description: Unique identifier for the Brand
        categoryId:
          type: integer
          format: int64
          description: Unique identifier for the Category

      required:
        - name
        - shortDescription
        - fullDescription
        - price
        - inStock
        - weight
        - cost
        - width
        - height
        - length
        - brandId
        - categoryId
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          description: HTTP status code for the error (e.g., 400 for Bad Request)
        error:
          type: string
          description: Short description of the error type
        message:
          type: string
          description: Detailed message explaining the reason for the error
        timestamp:
          type: string
          format: date-time
          description: The time the error occurred, in ISO 8601 format
      required:
        - status
        - error
        - message
        - timestamp
    ProductPage:
      type: object
      allOf:
        - $ref: '#/components/schemas/PageProperties'
        - type: object
          properties:
            products:
              type: array
              description: List of products on the current page.
              items:
                $ref: "#/components/schemas/Product"
    CategoryPage:
      type: object
      allOf:
        - $ref: '#/components/schemas/PageProperties'
        - type: object
          properties:
            products:
              type: array
              description: List of category on the current page.
              items:
                $ref: "#/components/schemas/Category"



  examples:
    CreateBrandValidExample:
      summary: Valid create brand Example
      description: Example of a valid brand request.
      value:
        name: "AMD"
    CreateCategoryValidExample:
      summary: Valid create category Example
      description: Example of a valid category request.
      value:
        name: "AGD"
        enabled: true
        parentId: 1
    CreateCategoryRootExample:
      summary: Valid Root category Example
      description: Example of a valid root category request.
      value:
        name: "Electronics"
        enabled: true
    PaginatedBrandExample:
      summary: Paginated Brand Response
      description: An example response with multiple brands and pagination details.
      value:
        page: 0
        size: 2
        sortField: name
        totalPages: 10
        totalElements: 20
        products:
          - id: 1
            name: "AMD"
          - id: 2
            name: "Lenovo"
    PaginatedCategoryExample:
      summary: Paginated Category Response
      description: An example response with multiple category and pagination details.
      value:
        page: 0
        size: 2
        sortField: name
        totalPages: 10
        totalElements: 20
        products:
          - id: 1
            name: "Electronics"
            enabled: true
          - id: 2
            name: "Electronics"
            enabled: true
            parentId: 1
    PaginatedProductsExample:
      summary: Paginated Products Response
      description: An example response with multiple products and pagination details.
      value:
        page: 0
        size: 2
        sortField: name
        totalPages: 10
        totalElements: 20
        products:
          - id: 1
            name: "Smartphone"
            shortDescription: "A compact smartphone with excellent battery life."
            fullDescription: "This smartphone features a sleek design, powerful processor, and a high-resolution camera."
            inStock: true
            weight: 0.5
            width: 10.0
            height: 15.0
            length: 7.5
            price: 999.99
            cost: 750.00
            discountPercent: 10
            categoryId: 123
            brandId: 123
          - id: 2
            name: "Laptop"
            shortDescription: "A powerful laptop for professionals."
            fullDescription: "This laptop is equipped with the latest hardware for exceptional performance."
            inStock: true
            weight: 2.5
            width: 35.0
            height: 20.0
            length: 2.5
            price: 1999.99
            cost: 1500.00
            discountPercent: 15
            categoryId: 123
            brandId: 123
    CreateProductValidExample:
      summary: Valid Product Example
      description: Example of a valid product request.
      value:
        name: "Smartphone"
        shortDescription: "A compact smartphone with excellent battery life."
        fullDescription: "This smartphone features a sleek design, powerful processor, and a high-resolution camera."
        inStock: true
        weight: 0.5
        width: 10.0
        height: 15.0
        length: 7.5
        price: 999.99
        cost: 750.00
        discountPercent: 10
        categoryId: 123
        brandId: 123
    CreateProductMissingFieldsExample:
      summary: Missing Required Fields Example
      description: Example with missing required fields like `name` and `price`.
      value:
        shortDescription: "A smartphone"
        fullDescription: "A smartphone with missing required fields in the request."
        inStock: true
        weight: 0.5
        width: 10.0
        height: 15.0
        length: 7.5
    CreateProductInvalidValuesExample:
      summary: Invalid Field Values Example
      description: Example with invalid values for some fields.
      value:
        name: "S"
        shortDescription: "A"
        fullDescription: "A smartphone with invalid values."
        inStock: true
        weight: -1.0
        width: 0.0
        height: 15.0
        length: 7.5
        price: -100.0
        cost: 0.0
        discountPercent: 110


  responses:
    BrandResponse:
      description: Response containing brand
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Brand"
    ProductResponse:
      description: Response containing product
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Product"
    CategoryResponse:
      description: Response containing category
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Category"
    BrandPage:
      description: Paginated response containing product data and pagination details.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductPage"
          examples:
            paginatedProductsExample:
              $ref: "#/components/examples/PaginatedBrandExample"
    ProductPage:
      description: Paginated response containing product data and pagination details.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductPage"
          examples:
            paginatedProductsExample:
              $ref: "#/components/examples/PaginatedProductsExample"
    CategoryPage:
      description: Paginated response containing product data and pagination details.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CategoryPage"
          examples:
            paginatedCategoryExample:
              $ref: "#/components/examples/PaginatedCategoryExample"
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            example1:
              summary: Internal Server Error
              value:
                status: 500
                error: "Internal Server Error"
                message: "An error occurred while processing the request. Please contact support@simpleshop.com."
                timestamp: "2024-11-26T12:00:00Z"
    ForbiddenError:
      description: Forbidden Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            example1:
              summary: Forbidden Error
              value:
                status: 403
                error: "Forbidden"
                message: "You are not authorized to access this resource."
                timestamp: "2024-11-26T12:05:00Z"
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            example1:
              summary: Example Bad Request
              value:
                status: 400
                error: "Bad Request"
                message: "The request could not be understood by the server due to malformed syntax."
                timestamp: "2024-11-26T12:10:00Z"
  parameters:
    PageNumber:
      name: page
      in: query
      description: Number of page
      required: true
      schema:
        type: integer
        format: int32
        minimum: 1
      example: 123
    SortField:
      name: sortField
      in: query
      description: Sort by specific field
      required: false
      schema:
        type: string
        maxLength: 255
      example: Name
    SortDirection:
      name: sortDir
      in: query
      description: Direction of sort
      required: false
      schema:
        type: string
        enum:
          - ASC
          - DESC
      example: ASC
    PathIdentifier:
      name: id
      in: path
      description: Unique identifier of the entity
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
      example: 123
  securitySchemes:
    oAuth2AuthCode:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: http://auth.simpleshop.com/oauth/authorize
          tokenUrl: http://auth.simpleshop.com/api/oauth.access
          scopes:
            openid:
